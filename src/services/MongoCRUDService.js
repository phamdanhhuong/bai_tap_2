const MongoUser = require('../models/mongoUser.js');

const createNewUser = async (data) => {
    try {
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await MongoUser.findByEmail(data.email);
        if (existingUser) {
            throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
        }

        // T·∫°o user m·ªõi
        const newUser = new MongoUser({
            email: data.email,
            password: data.password,
            firstName: data.firstName,
            lastName: data.lastName,
            address: data.address || '',
            phoneNumber: data.phoneNumber || '',
            gender: data.gender === '1' ? true : false,
            roleId: data.roleId || 'R3',
            positionId: data.positionId || ''
        });

        const savedUser = await newUser.save();
        console.log('‚úÖ User created successfully:', savedUser.email);
        
        return {
            success: true,
            message: 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng',
            user: savedUser.toSafeObject()
        };
        
    } catch (error) {
        console.error('‚ùå Error creating user:', error.message);
        throw new Error(`L·ªói t·∫°o ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

const getAllUsers = async () => {
    try {
        const users = await MongoUser.find({ isActive: true })
            .select('-password') // Lo·∫°i b·ªè password kh·ªèi k·∫øt qu·∫£
            .sort({ createdAt: -1 }) // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
            .lean(); // Tr·∫£ v·ªÅ plain JavaScript objects

        console.log(`üìã Retrieved ${users.length} users from MongoDB`);
        return users;
        
    } catch (error) {
        console.error('‚ùå Error getting all users:', error.message);
        throw new Error(`L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

const getUserInfoById = async (userId) => {
    try {
        if (!userId) {
            throw new Error('ID ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        }

        const user = await MongoUser.findById(userId)
            .select('-password')
            .lean();

        if (!user) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        console.log(`üë§ Retrieved user info: ${user.email}`);
        return user;
        
    } catch (error) {
        console.error('‚ùå Error getting user by ID:', error.message);
        throw new Error(`L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

const updateUser = async (data) => {
    try {
        if (!data.id) {
            throw new Error('ID ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        }

        // T√¨m user c·∫ßn update
        const user = await MongoUser.findById(data.id);
        if (!user) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p thay ƒë·ªïi
        const updateFields = {
            firstName: data.firstName,
            lastName: data.lastName,
            address: data.address || '',
            phoneNumber: data.phoneNumber || '',
            gender: data.gender === '1' ? true : false,
            roleId: data.roleId || user.roleId,
            positionId: data.positionId || ''
        };

        // S·ª≠ d·ª•ng findByIdAndUpdate ƒë·ªÉ c·∫≠p nh·∫≠t
        const updatedUser = await MongoUser.findByIdAndUpdate(
            data.id,
            updateFields,
            { 
                new: true, // Tr·∫£ v·ªÅ document sau khi update
                runValidators: true // Ch·∫°y validation
            }
        ).select('-password');

        if (!updatedUser) {
            throw new Error('C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng');
        }

        console.log(`‚úÖ User updated successfully: ${updatedUser.email}`);

        // Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ users sau khi update
        const allUsers = await getAllUsers();
        return allUsers;
        
    } catch (error) {
        console.error('‚ùå Error updating user:', error.message);
        throw new Error(`L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

const deleteUser = async (userId) => {
    try {
        if (!userId) {
            throw new Error('ID ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        }

        // Soft delete - ch·ªâ ƒë√°nh d·∫•u isActive = false
        const deletedUser = await MongoUser.findByIdAndUpdate(
            userId,
            { isActive: false },
            { new: true }
        );

        if (!deletedUser) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        console.log(`üóëÔ∏è User soft deleted: ${deletedUser.email}`);
        return {
            success: true,
            message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng'
        };
        
    } catch (error) {
        console.error('‚ùå Error deleting user:', error.message);
        throw new Error(`L·ªói x√≥a ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

// Th√™m method ƒë·ªÉ hard delete (x√≥a vƒ©nh vi·ªÖn)
const hardDeleteUser = async (userId) => {
    try {
        if (!userId) {
            throw new Error('ID ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        }

        const deletedUser = await MongoUser.findByIdAndDelete(userId);
        
        if (!deletedUser) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }

        console.log(`üíÄ User permanently deleted: ${deletedUser.email}`);
        return {
            success: true,
            message: 'X√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng th√†nh c√¥ng'
        };
        
    } catch (error) {
        console.error('‚ùå Error hard deleting user:', error.message);
        throw new Error(`L·ªói x√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

// Method ƒë·ªÉ t√¨m ki·∫øm users
const searchUsers = async (searchTerm) => {
    try {
        const users = await MongoUser.find({
            isActive: true,
            $or: [
                { email: { $regex: searchTerm, $options: 'i' } },
                { firstName: { $regex: searchTerm, $options: 'i' } },
                { lastName: { $regex: searchTerm, $options: 'i' } },
                { phoneNumber: { $regex: searchTerm, $options: 'i' } }
            ]
        })
        .select('-password')
        .sort({ createdAt: -1 })
        .lean();

        console.log(`üîç Search found ${users.length} users for term: "${searchTerm}"`);
        return users;
        
    } catch (error) {
        console.error('‚ùå Error searching users:', error.message);
        throw new Error(`L·ªói t√¨m ki·∫øm ng∆∞·ªùi d√πng: ${error.message}`);
    }
};

module.exports = {
    createNewUser,
    getAllUsers,
    getUserInfoById,
    updateUser,
    deleteUser,
    hardDeleteUser,
    searchUsers
};
